diff --git a/browser/base/content/tabbrowser-tabs.js b/browser/base/content/tabbrowser-tabs.js
index 06c2479886f0e3a7c5ba6d8d939a2c1f0f19442d..f73965ee9408b3f4c39646e6bda5b0c13f13628f 100644
--- a/browser/base/content/tabbrowser-tabs.js
+++ b/browser/base/content/tabbrowser-tabs.js
@@ -513,19 +513,40 @@
       }
       dt.setDragImage(toDrag, dragImageOffset, dragImageOffset);
 
+      const verticalTabs = Services.prefs.getBoolPref(
+        "pulse.tabs.vertical",
+        false
+      );
+
       // _dragData.offsetX/Y give the coordinates that the mouse should be
       // positioned relative to the corner of the new window created upon
       // dragend such that the mouse appears to have the same position
       // relative to the corner of the dragged tab.
       function clientX(ele) {
+        if (verticalTabs) {
+          return 0
+        }
+
         return ele.getBoundingClientRect().left;
       }
+      function clientY(ele) {
+        if (!verticalTabs) {
+          return 0
+        }
+
+        return ele.getBoundingClientRect().top;
+      }
+
       let tabOffsetX = clientX(tab) - clientX(this);
+      let tabOffsetY = clientY(tab) - clientY(this);
+
       tab._dragData = {
         offsetX: event.screenX - window.screenX - tabOffsetX,
-        offsetY: event.screenY - window.screenY,
+        offsetY: event.screenY - window.screenY - tabOffsetY,
         scrollX: this.arrowScrollbox.scrollbox.scrollLeft,
+        scrollY: this.arrowScrollbox.scrollbox.scrollTop,
         screenX: event.screenX,
+        screenY: event.screenY,
         movingTabs: (tab.multiselected ? gBrowser.selectedTabs : [tab]).filter(
           t => t.pinned == tab.pinned
         ),
@@ -612,21 +633,31 @@
         }
       }
 
+      const verticalTabs = Services.prefs.getBoolPref(
+        "pulse.tabs.vertical",
+        false
+      );
+
+      const left = verticalTabs ? "top" : "left";
+      const right = verticalTabs ? "bottom" : "right";
+      const width = verticalTabs ? "height" : "width";
+      const clientWidth = verticalTabs ? "clientHeight" : "clientWidth";
+
       var rect = arrowScrollbox.getBoundingClientRect();
       var newMargin;
       if (pixelsToScroll) {
         // if we are scrolling, put the drop indicator at the edge
         // so that it doesn't jump while scrolling
         let scrollRect = arrowScrollbox.scrollClientRect;
-        let minMargin = scrollRect.left - rect.left;
+        let minMargin = scrollRect[left] - rect[left];
         let maxMargin = Math.min(
-          minMargin + scrollRect.width,
-          scrollRect.right
+          minMargin + scrollRect[width],
+          scrollRect[right]
         );
         if (RTL_UI) {
           [minMargin, maxMargin] = [
-            this.clientWidth - maxMargin,
-            this.clientWidth - minMargin,
+            this[clientWidth] - maxMargin,
+            this[clientWidth] - minMargin,
           ];
         }
         newMargin = pixelsToScroll > 0 ? maxMargin : minMargin;
@@ -635,30 +666,40 @@
         let children = this.allTabs;
         if (newIndex == children.length) {
           let tabRect = this._getVisibleTabs().at(-1).getBoundingClientRect();
-          if (RTL_UI) {
-            newMargin = rect.right - tabRect.left;
+          if (RTL_UI && !verticalTabs) {
+            newMargin = rect[right] - tabRect[left];
           } else {
-            newMargin = tabRect.right - rect.left;
+            newMargin = tabRect[right] - rect[left];
           }
         } else {
           let tabRect = children[newIndex].getBoundingClientRect();
-          if (RTL_UI) {
-            newMargin = rect.right - tabRect.right;
+          if (RTL_UI && !verticalTabs) {
+            newMargin = rect[right] - tabRect[right];
           } else {
-            newMargin = tabRect.left - rect.left;
+            newMargin = tabRect[left] - rect[left];
           }
         }
       }
 
       ind.hidden = false;
-      newMargin += ind.clientWidth / 2;
-      if (RTL_UI) {
+      newMargin += ind[clientWidth] / 2;
+      if (RTL_UI && !verticalTabs) {
         newMargin *= -1;
       }
       ind.style.transform = "translate(" + Math.round(newMargin) + "px)";
+
+      ind.style.transform =
+        "translate(" + verticalTabs
+          ? "0, "
+          : "" + Math.round(newMargin) + "px)";
     }
 
     on_drop(event) {
+      const verticalTabs = Services.prefs.getBoolPref(
+        "pulse.tabs.vertical",
+        false
+      );
+
       var dt = event.dataTransfer;
       var dropEffect = dt.dropEffect;
       var draggedTab;
@@ -715,7 +756,7 @@
           incrementDropIndex = false;
         }
 
-        if (oldTranslateX && oldTranslateX != newTranslateX && !gReduceMotion) {
+        if (oldTranslateX && oldTranslateX != newTranslateX && !(gReduceMotion || verticalTabs)) {
           for (let tab of movingTabs) {
             tab.setAttribute("tabdrop-samewindow", "true");
             tab.style.transform = "translateX(" + newTranslateX + "px)";
@@ -1485,19 +1526,28 @@
         }
       }
 
-      if (!("animLastScreenX" in draggedTab._dragData)) {
-        draggedTab._dragData.animLastScreenX = draggedTab._dragData.screenX;
+      const animLastScreen = verticalTabs
+        ? "animLastScreenY"
+        : "animLastScreenX";
+      const screen = verticalTabs ? "screenY" : "screenX";
+      const dimensions = verticalTabs ? "height" : "width";
+      const scrollEdge = verticalTabs ? "scrollTop" : "scrollLeft";
+      const scrollDimension = verticalTabs ? "scrollY" : "scrollX";
+      const translate = verticalTabs ? "translateY" : "translateX";
+
+      if (!(animLastScreen in draggedTab._dragData)) {
+        draggedTab._dragData[animLastScreen] = draggedTab._dragData[screen];
       }
 
-      let screenX = event.screenX;
-      if (screenX == draggedTab._dragData.animLastScreenX) {
+      let screenX = event[screen];
+      if (screenX == draggedTab._dragData[animLastScreen]) {
         return;
       }
 
       // Direction of the mouse movement.
-      let ltrMove = screenX > draggedTab._dragData.animLastScreenX;
+      let ltrMove = screenX > draggedTab._dragData[animLastScreen];
 
-      draggedTab._dragData.animLastScreenX = screenX;
+      draggedTab._dragData[animLastScreen] = screenX;
 
       let pinned = draggedTab.pinned;
       let numPinned = gBrowser._numPinnedTabs;
@@ -1506,36 +1556,40 @@
         pinned ? numPinned : undefined
       );
 
-      if (RTL_UI) {
+      if (RTL_UI && !verticalTabs) {
         tabs.reverse();
         // Copy moving tabs array to avoid infinite reversing.
         movingTabs = [...movingTabs].reverse();
       }
-      let tabWidth = draggedTab.getBoundingClientRect().width;
+      let tabWidth = draggedTab.getBoundingClientRect()[dimensions];
       let shiftWidth = tabWidth * movingTabs.length;
+
+      // We want to store the output value as the width and the height to force
+      // compatibility with code elsewhere
       draggedTab._dragData.tabWidth = tabWidth;
+      draggedTab._dragData.tabHeight = tabWidth;
 
       // Move the dragged tab based on the mouse position.
 
       let leftTab = tabs[0];
       let rightTab = tabs[tabs.length - 1];
-      let rightMovingTabScreenX = movingTabs[movingTabs.length - 1].screenX;
-      let leftMovingTabScreenX = movingTabs[0].screenX;
-      let translateX = screenX - draggedTab._dragData.screenX;
+      let rightMovingTabScreenX = movingTabs[movingTabs.length - 1][screen];
+      let leftMovingTabScreenX = movingTabs[0][screen];
+      let translateX = screenX - draggedTab._dragData[screen];
       if (!pinned) {
         translateX +=
-          this.arrowScrollbox.scrollbox.scrollLeft -
-          draggedTab._dragData.scrollX;
+          this.arrowScrollbox.scrollbox[scrollEdge] -
+          draggedTab._dragData[scrollDimension];
       }
-      let leftBound = leftTab.screenX - leftMovingTabScreenX;
+      let leftBound = leftTab[screen] - leftMovingTabScreenX;
       let rightBound =
-        rightTab.screenX +
-        rightTab.getBoundingClientRect().width -
+        rightTab[screen] +
+        rightTab.getBoundingClientRect()[dimensions] -
         (rightMovingTabScreenX + tabWidth);
       translateX = Math.min(Math.max(translateX, leftBound), rightBound);
 
       for (let tab of movingTabs) {
-        tab.style.transform = "translateX(" + translateX + "px)";
+        tab.style.transform = translate + "(" + translateX + "px)";
       }
 
       draggedTab._dragData.translateX = translateX;
@@ -1568,11 +1622,11 @@
         if (tabs[mid] == draggedTab && ++mid > high) {
           break;
         }
-        screenX = tabs[mid].screenX + getTabShift(tabs[mid], oldIndex);
+        screenX = tabs[mid][screen] + getTabShift(tabs[mid], oldIndex);
         if (screenX > tabCenter) {
           high = mid - 1;
         } else if (
-          screenX + tabs[mid].getBoundingClientRect().width <
+          screenX + tabs[mid].getBoundingClientRect()[dimensions] <
           tabCenter
         ) {
           low = mid + 1;
@@ -1595,16 +1649,16 @@
       for (let tab of tabs) {
         if (tab != draggedTab) {
           let shift = getTabShift(tab, newIndex);
-          tab.style.transform = shift ? "translateX(" + shift + "px)" : "";
+          tab.style.transform = shift ? translate + "(" + shift + "px)" : "";
         }
       }
 
       function getTabShift(tab, dropIndex) {
         if (tab._tPos < draggedTab._tPos && tab._tPos >= dropIndex) {
-          return RTL_UI ? -shiftWidth : shiftWidth;
+          return RTL_UI && !verticalTabs ? -shiftWidth : shiftWidth;
         }
         if (tab._tPos > draggedTab._tPos && tab._tPos < dropIndex) {
-          return RTL_UI ? shiftWidth : -shiftWidth;
+          return RTL_UI && !verticalTabs ? shiftWidth : -shiftWidth;
         }
         return 0;
       }
